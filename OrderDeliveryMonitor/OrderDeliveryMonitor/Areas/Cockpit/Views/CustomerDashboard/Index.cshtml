@model IEnumerable<Order>

@{
    Layout = "~/Views/Shared/_CrudIndex.cshtml";
}

@section indexBody {

    <div id="CustomerDashboardContainer" class="painel-main">
        <div class="painel-body">
            <div class="container">
                <div class="container-header">
                    <span>
                        :: Red Header
                    </span>
                </div>
                <div id="AwaitingContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Awaiting))
                </div>
            </div>
            <div class="container">
                <div class="container-header">
                    <span>
                        :: Yellow Header
                    </span>
                </div>
                <div id="PreparingContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Preparing))
                </div>
            </div>
            <div class="container">
                <div class="container-header">
                    <span>
                        :: Green Header
                    </span>
                </div>
                <div id="FinishedContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Finished))
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        //Campinho da publicação WebAPI contendo o HUB.
        const signalRconn = SigalRConnection('http://localhost:55317/OrderDeliveryMonitorHub');

        signalRconn.on('@AppUtilities.LOAD_AWAITING_CONTAINER_FOR_CUSTOMERS', function (pOrders, pOrderId, pCommand) {

            if (pOrderId) {
                let $ticket = document.getElementById(`tck${pOrderId}`);
                let $class = pCommand === '@EOrderCommand.Sent' ? 'sent' : 'dragged';

                $ticket.classList.add($class);
            }

            MountContainer(pOrders, '@AppUtilities.AWAITING_CONTAINER');
        });

        signalRconn.on('@AppUtilities.LOAD_PREPARING_CONTAINER_FOR_CUSTOMERS', function (pOrders, pOrderId, pCommand) {

            if (pOrderId) {
                let $ticket = document.getElementById(`tck${pOrderId}`);
                let $class = pCommand === '@EOrderCommand.Sent' ? 'sent' : 'dragged';

                $ticket.classList.add($class);
            }

            MountContainer(pOrders, '@AppUtilities.PREPARING_CONTAINER');
        });

        signalRconn.on('@AppUtilities.LOAD_FINISHED_CONTAINER_FOR_CUSTOMER', function (pOrders, pOrderId) {

            if (pOrderId) {
                let $ticket = document.getElementById(`tck${pOrderId}`);
                let $class = 'dragged';

                $ticket.classList.add($class);
            }

            MountContainer(pOrders, '@AppUtilities.FINISHED_CONTAINER');
        });

        function MountContainer(pOrders, baseContainer) {
            let container = document.getElementById(baseContainer);
            let textHtml = '';

            Array.from(pOrders).forEach(order => {
                textHtml += order.customerTicketLayout;
            });

            container.innerHTML = textHtml;
        }

    </script>
}



