@model IEnumerable<Order>

@{
    Layout = "~/Views/Shared/_CrudIndex.cshtml";
}

@section indexBody {

    <div id="DashboardContainer" class="painel-main">
        <div class="painel-header">
            <span>
                PAINEL DE CONTROLE
            </span>            
        </div>
        <div class="painel-body">
            <div class="container">
                <div class="container-header">
                    <span>
                        Aguardando...
                    </span>
                </div>
                <div id="AwaitingContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Awaiting))
                </div>
            </div>
            <div class="container">
                <div class="container-header">
                    <span>
                        Preparando...
                    </span>
                </div>
                <div id="PreparingContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Preparing))
                </div>
            </div>
            <div class="container">
                <div class="container-header">
                    <span>
                        PRONTO!
                    </span>
                </div>
                <div id="FinishedContainer" class="container-body">
                    @await Html.PartialAsync("Ticket", Model.Where(o => o.Process == EOrderProcess.Finished))
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        //Campinho da publicação WebAPI contendo o HUB.
        const signalRconn = SigalRConnection('@AppUtilities.HUBSERVERPATH');

        setInterval(() => {
            let $timers = document.querySelectorAll('.timer');

            $timers.forEach(timer => {
                TimerCalc(timer);
            });

        }, 1000);

        function TimerCalc(timer) {
            console.info(timer.dataset.startdate);
        }

        signalRconn.on('@AppUtilities.RELOAD_AWAITING_CONTAINER', function () {
            signalRconn.invoke('@AppUtilities.RELOADAWAITINGCONTAINER_METHOD', GetOrders());
        });

        signalRconn.on('@AppUtilities.LOAD_AWAITING_CONTAINER', function (pOrders) {
            MountContainer(pOrders, '@AppUtilities.AWAITING_CONTAINER');
        });

        function GetOrders() {
            let $commands = document.querySelectorAll('.command');
            let $orders = [];

            if ($commands) {
                $commands.forEach(cmd => {
                    let $orderid = cmd.dataset.orderid;
                    $orders.push($orderid);
                });
            }

            return $orders || null;
        }

        function ToPreparingByClick(e) {            
            ToPreparing(e, '@EOrderCommand.Sent');
        }

        function ToFinishedByClick(e) {
            ToFinished(e, '@EOrderCommand.Sent');
        }

        function ApplyStyle(e) {
            let $this = e;
            let $quote = document.getElementById(`tck${$this.dataset.orderid}`);
            $quote.classList.add('sent');
        }

        function ToPreparing(e, pCommand) {
            let $this = e;
            let $orderId = $this.dataset.orderid;
            ApplyStyle(e);

            signalRconn.invoke('@AppUtilities.FROMAWAITINGTOPREPARING_METHOD', GetOrders(), $orderId, pCommand);

            signalRconn.on('@AppUtilities.LOAD_PREPARING_CONTAINER', function (pOrders) {
                MountContainer(pOrders, '@AppUtilities.PREPARING_CONTAINER');
            });
        }

        function ToFinished(e, pCommand) {
            let $this = e;
            let $orderId = $this.dataset.orderid;

            signalRconn.invoke('@AppUtilities.FROMPREPARINGTOFINISHED_METHOD', GetOrders(), $orderId, pCommand);

            signalRconn.on('@AppUtilities.LOAD_FINISHED_CONTAINER', function (pOrders) {
                MountContainer(pOrders, '@AppUtilities.FINISHED_CONTAINER');
            });
        }

        function MountContainer(pOrders, baseContainer) {
            let $container = document.getElementById(baseContainer);
            let $textHtml = '';

            Array.from(pOrders).forEach(order => {
                $textHtml += order.ticketLayout;
            });

            $container.innerHTML = $textHtml;
        }

    </script>
}

