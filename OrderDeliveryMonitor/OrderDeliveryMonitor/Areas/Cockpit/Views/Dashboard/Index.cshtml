@model IEnumerable<Order>

@{
    Layout = "~/Views/Shared/_CrudIndex.cshtml";
}

@section indexBody {

    <h1>DASHBOARD</h1>
    
    <div id="customerDashboardContainer" style="display: flex; flex-direction: row; background-color: gray; width: 100%; position: relative; position: absolute; left: 0px; top: 0px; bottom: 0px;">
        
        <div id="AwaitingContainer" style="display: flex; flex-direction: column;">
            @await Html.PartialAsync(AppUtilities.AWAITING_CONTAINER, Model.Where(o => o.Process == EOrderProcess.Awaiting))
        </div>
        <div id="PreparingContainer" style="display: flex; flex-direction: column;">
            @await Html.PartialAsync(AppUtilities.PREPARING_CONTAINER, Model.Where(o => o.Process == EOrderProcess.Preparing))
        </div>
        <div id="FinishedContainer" style="display: flex; flex-direction: column;">
            @await Html.PartialAsync(AppUtilities.FINISHED_CONTAINER, Model.Where(o => o.Process == EOrderProcess.Finished))
        </div>

    </div>

    <script type="text/javascript">
        //Campinho da publicação WebAPI contendo o HUB.
        const signalRconn = SigalRConnection('http://localhost:55317/OrderDeliveryMonitorHub');

        setInterval(() => {
            let $timers = document.querySelectorAll('.timer');

            $timers.forEach(timer => {
                TimerCalc(timer);
            });

        }, 1000);

        function TimerCalc(timer) {
            console.info(timer.dataset.startdate);
        }

        signalRconn.on('@AppUtilities.RELOAD_AWAITING_CONTAINER', function () {
            signalRconn.invoke('@AppUtilities.RELOADAWAITINGCONTAINER_METHOD', GetOrders());
        });

        signalRconn.on('@AppUtilities.LOAD_AWAITING_CONTAINER', function (pOrders) {
            SetOrders(pOrders);
            MountContainer(pOrders, '@AppUtilities.AWAITING_CONTAINER');
        });

        function SetOrders(pOrders) {
            debugger;
            sessionStorage.setItem('Orders', JSON.stringify(pOrders));
        }

        function GetOrders() {
            debugger;
            return JSON.parse(sessionStorage.getItem('Orders'));
        }

        function ToPreparingByClick(e) {
            ToPreparing(e, '@EOrderCommand.Sent');
        }

        function ToFinishedByClick(e) {
            ToFinished(e, '@EOrderCommand.Sent');
        }

        function ToPreparing(e, pCommand) {
            debugger;
            let $this = e;
            let vOrderId = $this.dataset.orderid;

            signalRconn.invoke('@AppUtilities.FROMAWAITINGTOPREPARING_METHOD', GetOrders(), vOrderId, pCommand);
        }

        signalRconn.on('@AppUtilities.LOAD_PREPARING_CONTAINER', function (pOrders) {
            debugger;
            SetOrders();
            MountContainer(pOrders, '@AppUtilities.PREPARING_CONTAINER');
        });

        function ToFinished(e, pCommand) {
            debugger;
            let $this = e;
            let vOrderId = $this.dataset.orderid;

            signalRconn.invoke('@AppUtilities.FROMPREPARINGTOFINISHED_METHOD', GetOrders(), vOrderId, pCommand);

            signalRconn.on('@AppUtilities.LOAD_FINISHED_CONTAINER', function (pOrders) {
                SetOrders(pOrders);
                MountContainer(pOrders, '@AppUtilities.FINISHED_CONTAINER');
            });
        }

        function MountContainer(pOrders, baseContainer) {
            let container = document.getElementById(baseContainer);
            let textHtml = '';

            Array.from(pOrders).forEach(order => {
                textHtml += order.ticketLayout;
            });

            container.innerHTML = textHtml;
        }

    </script>
}

